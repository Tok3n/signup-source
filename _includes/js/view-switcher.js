// Generated by CoffeeScript 1.7.1
(function() {
  var defaultTransitions;

  defaultTransitions = {
    exit: function(exitingView, callback) {
      this.height(this.height());
      return exitingView.fadeOut(500, function() {
        return callback();
      });
    },
    prepare: function(exitingView, enteringView, callback) {
      var newHeight;
      newHeight = enteringView.outerHeight() + parseInt(this.css("padding-top"), 10) + parseInt(this.css("padding-bottom"), 10);
      return this.animate({
        height: newHeight
      }, 500, function() {
        return callback();
      });
    },
    enter: function(enteringView, callback) {
      return enteringView.fadeIn(500, function() {
        return callback();
      });
    }
  };

  (function(root) {
    return root.ViewSwitcher = function(options) {
      var addAllViews, attrIdentifier, container, enter, exit, finishRender, hub, initialView, initialViewName, prepare, rawViews, state, switchView, timedOffsets, useHistory, views, _off, _on, _trigger;
      rawViews = options.views;
      container = $(options.container);
      attrIdentifier = options.attrIdentifier || "id";
      initialView = options.initialView;
      initialViewName = $(options.initialView).attr(attrIdentifier);
      useHistory = options.useHistory;
      timedOffsets = options.timedOffsets;
      exit = options.exit || defaultTransitions.exit;
      prepare = options.prepare || defaultTransitions.prepare;
      enter = options.enter || defaultTransitions.enter;
      views = {};
      views.selectView = function(name) {
        if (this[name]) {
          return this[name];
        } else {
          console.error("A view named " + name + " is not registered on this ViewSwitcher");
          return false;
        }
      };
      views.addView = function(view) {
        var name;
        view = $(view);
        name = view.attr(attrIdentifier);
        if (this[name]) {
          return console.error("A view or method named " + name + " is already registered on this ViewSwitcher");
        } else {
          return views[name] = view;
        }
      };
      views.removeView = function(name) {
        return this[name] = void 0;
      };
      hub = $({});
      _on = function() {
        return hub.on.apply(hub, arguments);
      };
      _off = function() {
        return hub.off.apply(hub, arguments);
      };
      _trigger = function() {
        return hub.trigger.apply(hub, arguments);
      };
      switchView = function(incomingViewName) {
        var boundCleanup, boundEnter, boundPrepare, incomingView;
        incomingView = views.selectView(incomingViewName);
        if (timedOffsets) {
          setTimeout(exit.bind(container, incomingView, $.noop), 0);
          setTimeout(prepare.bind(container, state.activeView, incomingView, $.noop), options.exitDelay);
          setTimeout(enter.bind(container, incomingView, $.noop), options.exitDelay + options.prepareDelay);
          return setTimeout(finishRender.bind(null, incomingView), options.exitDelay + options.prepareDelay + options.enterDelay);
        } else {
          boundCleanup = finishRender.bind(null, incomingViewName);
          boundEnter = enter.bind(container, incomingView, boundCleanup);
          boundPrepare = prepare.bind(container, state.activeView, incomingView, boundEnter);
          return exit.bind(container, state.activeView, boundPrepare)();
        }
      };
      switchView.on = _on;
      switchView.off = _off;
      switchView.trigger = _trigger;
      switchView.views = function() {
        return views;
      };
      switchView.addView = function(view) {
        return views.addView(view);
      };
      switchView.selectView = function(name) {
        return views.selectView(name);
      };
      switchView.removeView = function(name) {
        return views.removeView(name);
      };
      state = {
        activeView: $(""),
        pastViews: []
      };
      finishRender = function(incomingViewName) {
        var incomingView;
        incomingView = views.selectView(incomingViewName);
        state.pastViews.push(state.activeView);
        state.activeView = incomingView;
        return _trigger("renderComplete", incomingViewName, state.activeView);
      };
      addAllViews = function(rawViews) {
        if (rawViews instanceof jQuery) {
          return rawViews.each(function() {
            return views.addView(this);
          });
        } else if (rawViews instanceof Array) {
          return rawViews.forEach(function(el) {
            return views.addView(el);
          });
        } else if (rawViews.substr) {
          return addAllViews($(rawViews));
        }
      };
      addAllViews(rawViews);
      prepare.bind(container, state.activeView, views.selectView(initialViewName), enter.bind(container, views.selectView(initialViewName), finishRender.bind(null, initialViewName)))();
      return switchView;
    };
  })((function() {
    if (typeof exports !== "undefined") {
      return exports;
    } else {
      return window;
    }
  })());

}).call(this);
